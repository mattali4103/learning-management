import { useEffect, useMemo, useState, useCallback } from "react";
import { KeHoachHocTapTable } from "../../components/table/KeHoachHocTapTable";
import { SortableHeader } from "../../components/table/SortableHeader";
import NhomHocPhanTuChonTable from "../../components/table/NhomHocPhanTuChonTable";
import type { HocPhan } from "../../types/HocPhan";
import {
  HOCPHAN_SERVICE,
  KHHT_SERVICE,
  KQHT_SERVICE,
} from "../../api/apiEndPoints";
import { CirclePlus, Trash2, Users, BookOpen, SquareLibrary, CheckCircle, BarChart3 } from "lucide-react";

import Error from "../../components/Error";
import type { KeHoachHocTap } from "../../types/KeHoachHoctap";
import ErrorMessageModal from "../../components/modals/ErrorMessageModal";
import useAxiosPrivate from "../../hooks/useAxiosPrivate";
import useAuth from "../../hooks/useAuth";
import useHocKyData from "../../hooks/useHocKyData";
import type { ColumnDef } from "@tanstack/react-table";

interface HocPhanCaiThien {
  id: number;
  maHp: string;
  tenHp: string;
  diemChu: string;
  diemSo?: number;
  soTinChi: number;
}
interface HocPhanTuChon {
  id: number;
  tenNhom: string;
  tinChiYeuCau: number;
  hocPhanTuChonList: HocPhan[];
}

// Component for displaying colored badges
const StatusBadge: React.FC<{
  color: 'green' | 'orange' | 'blue' | 'red' | 'cyan' | 'purple' | 'gray' | 'indigo' | 'violet' | 'emerald';
  children: React.ReactNode;
  className?: string;
}> = ({ color, children, className = "" }) => {
  const colorClasses = {
    green: "bg-green-100 text-green-800",
    orange: "bg-orange-100 text-orange-800", 
    blue: "bg-blue-100 text-blue-800",
    red: "bg-red-100 text-red-800",
    cyan: "bg-cyan-100 text-cyan-800",
    purple: "bg-purple-100 text-purple-800",
    gray: "bg-gray-100 text-gray-600",
    indigo: "bg-indigo-100 text-indigo-800",
    violet: "bg-violet-100 text-violet-800",
    emerald: "bg-emerald-100 text-emerald-800"
  };

  return (
    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${colorClasses[color]} ${className}`}>
      {children}
    </span>
  );
};

// Component for section headers
const SectionHeader: React.FC<{
  title: string;
  description: string;
  icon: React.ReactNode;
  children?: React.ReactNode;
  colorScheme: 'blue' | 'emerald' | 'purple' | 'green' | 'indigo' | 'orange';
  loading?: boolean;
}> = ({ title, description, icon, children, colorScheme, loading = false }) => {
  const colorClasses = {
    blue: "from-blue-100 to-cyan-100 border-blue-300 text-blue-900 text-blue-700",
    emerald: "from-emerald-100 to-green-100 border-emerald-300 text-emerald-900 text-emerald-700", 
    purple: "from-purple-100 to-violet-100 border-purple-300 text-purple-900 text-purple-700",
    green: "from-green-100 to-emerald-100 border-green-300 text-green-900 text-green-700",
    indigo: "from-indigo-100 to-purple-100 border-indigo-300 text-indigo-900 text-indigo-700",
    orange: "from-orange-100 to-red-100 border-orange-300 text-orange-900 text-orange-700",
  };

  const [bgClass, borderClass, titleClass, descClass] = colorClasses[colorScheme].split(' ');

  return (
    <div className={`bg-gradient-to-r ${bgClass} border-2 ${borderClass} rounded-lg p-4 mb-4 shadow-sm`}>
      <div className="flex items-center justify-between">
        <div>
          <h3 className={`text-lg font-semibold ${titleClass} mb-1`}>
            {title}
          </h3>
          <p className={`${descClass} text-sm`}>
            {description}
          </p>
          {children}
        </div>
        <div className="flex items-center space-x-3">
          <div className={titleClass.replace('text-', '')}>
            {icon}
          </div>
          {loading && (
            <div className={`flex items-center space-x-2 ${titleClass}`}>
              <div className={`animate-spin rounded-full h-4 w-4 border-b-2 border-${colorScheme}-600`}></div>
              <span className="text-sm">ƒêang t·∫£i...</span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};


// Component for completion status summary
const CompletionStatusSummary: React.FC<{
  completionStatus: {
    completedGroups: string[];
    pendingGroups: string[];
    chuyenNganhGroups: Map<string, { completed: boolean; details: string[] }>;
  };
}> = ({ completionStatus }) => {
  if (completionStatus.completedGroups.length === 0 && 
      completionStatus.pendingGroups.length === 0 && 
      completionStatus.chuyenNganhGroups.size === 0) {
    return null;
  }

  return (
    <div className="mb-6">
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4">
        <h3 className="text-lg font-semibold text-blue-800 mb-4 flex items-center">
          <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          T√¨nh tr·∫°ng ho√†n th√†nh c√°c nh√≥m h·ªçc ph·∫ßn
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {/* Nh√≥m ƒë√£ ho√†n th√†nh */}
          {completionStatus.completedGroups.length > 0 && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <h4 className="font-semibold text-green-800 mb-2 flex items-center">
                <CheckCircle className="w-5 h-5 mr-2" />
                ƒê√£ ho√†n th√†nh ({completionStatus.completedGroups.length})
              </h4>
              <div className="space-y-1">
                {completionStatus.completedGroups.map((group, index) => (
                  <div key={index} className="text-sm text-green-700 bg-green-100 rounded px-2 py-1">
                    {group}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Nh√≥m ch∆∞a ho√†n th√†nh */}
          {completionStatus.pendingGroups.length > 0 && (
            <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
              <h4 className="font-semibold text-orange-800 mb-2 flex items-center">
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Ch∆∞a ho√†n th√†nh ({completionStatus.pendingGroups.length})
              </h4>
              <div className="space-y-1">
                {completionStatus.pendingGroups.map((group, index) => (
                  <div key={index} className="text-sm text-orange-700 bg-orange-100 rounded px-2 py-1">
                    {group}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Nh√≥m chuy√™n ng√†nh */}
          {completionStatus.chuyenNganhGroups.size > 0 && (
            <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
              <h4 className="font-semibold text-purple-800 mb-2 flex items-center">
                <Users className="w-5 h-5 mr-2" />
                Nh√≥m chuy√™n ng√†nh
              </h4>
              <div className="space-y-2">
                {Array.from(completionStatus.chuyenNganhGroups.entries()).map(([baseName, info]) => (
                  <div key={baseName} className={`text-sm rounded px-2 py-1 ${
                    info.completed 
                      ? "bg-green-100 text-green-700" 
                      : "bg-orange-100 text-orange-700"
                  }`}>
                    <div className="font-medium flex items-center">
                      {info.completed ? (
                        <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                      ) : (
                        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      )}
                      {baseName}
                    </div>
                    <div className="text-xs mt-1 opacity-80">
                      {info.completed ? "ƒê√£ ho√†n th√†nh" : "Ch∆∞a ho√†n th√†nh"}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* T·ªïng k·∫øt */}
        <div className="mt-4 pt-3 border-t border-blue-200">
          <div className="flex flex-wrap gap-4 text-sm">
            <span className="text-green-700 font-medium">
              ‚úÖ Ho√†n th√†nh: {completionStatus.completedGroups.length}
            </span>
            <span className="text-orange-700 font-medium">
              ‚è≥ Ch∆∞a ho√†n th√†nh: {completionStatus.pendingGroups.length}
            </span>
            <span className="text-blue-700 font-medium">
              üìä T·ªïng nh√≥m: {completionStatus.completedGroups.length + completionStatus.pendingGroups.length}
            </span>
            {completionStatus.chuyenNganhGroups.size > 0 && (
              <span className="text-purple-700 font-medium">
                üéì Nh√≥m chuy√™n ng√†nh: {Array.from(completionStatus.chuyenNganhGroups.values()).filter(g => g.completed).length}/{completionStatus.chuyenNganhGroups.size}
              </span>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

// Component for course section with optional electives
const CourseSection: React.FC<{
  sectionName: string;
  mainCourses: HocPhan[];
  electiveGroups: HocPhanTuChon[];
  columns: ColumnDef<HocPhan>[];
  loading: boolean;
  getTinChiDaChonTrongNhom: (nhom: HocPhanTuChon) => number;
  getChuyenNganhCompletionStatus: (nhomList: HocPhanTuChon[]) => Map<number, boolean>;
  selectedHocPhan: KeHoachHocTap[];
  onAddHocPhan: (hocPhan: HocPhan, nhomId?: number) => void;
  isHocPhanAlreadyAdded: (maHp: string) => boolean;
}> = ({
  sectionName,
  mainCourses,
  electiveGroups,
  columns,
  loading,
  getTinChiDaChonTrongNhom,
  getChuyenNganhCompletionStatus,
  selectedHocPhan,
  onAddHocPhan,
  isHocPhanAlreadyAdded
}) => {
  // Filter out elective courses from main courses to avoid duplication
  const filteredMainCourses = mainCourses.filter(hp => 
    !electiveGroups.some(group => 
      group.hocPhanTuChonList.some(tc => tc.maHp === hp.maHp)
    )
  );

  return (
    <div className="space-y-6">
      {/* Main courses */}
      <KeHoachHocTapTable
        name={`H·ªçc ph·∫ßn ${sectionName}${electiveGroups.length > 0 ? " (B·∫Øt bu·ªôc)" : ""}`}
        data={filteredMainCourses}
        columns={columns}
        initialExpanded={true}
        loading={loading}
      />
      
      {/* Elective courses */}
      {electiveGroups.length > 0 && (
        <div className="space-y-4">
          <SectionHeader
            title={`C√°c nh√≥m h·ªçc ph·∫ßn t·ª± ch·ªçn ${sectionName}`}
            description={`C√°c nh√≥m h·ªçc ph·∫ßn t·ª± ch·ªçn thu·ªôc kh·ªëi ${sectionName} - ${electiveGroups.length} nh√≥m`}
            icon={<span className="inline-flex items-center px-3 py-1 bg-blue-400 rounded-full text-sm font-medium">‚ú® T·ª± ch·ªçn</span>}
            colorScheme="purple"
          />

          <NhomHocPhanTuChonTable
            nhomHocPhanTuChon={electiveGroups}
            selectedHocPhan={selectedHocPhan}
            onAddHocPhan={onAddHocPhan}
            getTinChiDaChonTrongNhom={getTinChiDaChonTrongNhom}
            getChuyenNganhCompletionStatus={getChuyenNganhCompletionStatus}
            isHocPhanAlreadyAdded={isHocPhanAlreadyAdded}
          />
        </div>
      )}
    </div>
  );
};

const NhapKeHoachHocTap: React.FC = () => {
  const { auth } = useAuth();
  const [availableHocPhan, setAvailableHocPhan] = useState<HocPhan[]>([]);
  const [NhomHocPhanTuChon, setNhomHocPhanTuChon] = useState<HocPhanTuChon[]>(
    []
  );
  const [hocPhanGoiY, setHocPhanGoiY] = useState<HocPhan[]>([]);
  const [maHocPhanInKHHT, setMaHocPhanInKHHT] = useState<string[]>([]);
  const [hocPhanCaiThien, setHocPhanCaiThien] = useState<HocPhanCaiThien[]>([]);
  const [selectedHocPhan, setSelectedHocPhan] = useState<KeHoachHocTap[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [fetchLoading, setFetchLoading] = useState(false);
  const [success, setSuccess] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<"select" | "selected" | "chuyenNganh" | "other" | "daiCuong" | "coSoNganh" | "chuyenNganh2" | "completionStatus">("select");
  
  // States for h·ªçc ph·∫ßn theo lo·∫°i
  const [hocPhanDaiCuong, setHocPhanDaiCuong] = useState<HocPhan[]>([]);
  const [hocPhanCoSoNganh, setHocPhanCoSoNganh] = useState<HocPhan[]>([]);
  const [hocPhanChuyenNganh, setHocPhanChuyenNganh] = useState<HocPhan[]>([]);
  
  // States for h·ªçc ph·∫ßn t·ª± ch·ªçn theo lo·∫°i
  const [hocPhanTuChonDaiCuong, setHocPhanTuChonDaiCuong] = useState<HocPhanTuChon[]>([]);
  const [hocPhanTuChonCoSoNganh, setHocPhanTuChonCoSoNganh] = useState<HocPhanTuChon[]>([]);
  const [hocPhanTuChonChuyenNganh, setHocPhanTuChonChuyenNganh] = useState<HocPhanTuChon[]>([]);
  
  const [loadingLoaiHp, setLoadingLoaiHp] = useState<{[key: string]: boolean}>({});
  const [completionStatus, setCompletionStatus] = useState<{
    completedGroups: string[];
    pendingGroups: string[];
    chuyenNganhGroups: Map<string, { completed: boolean; details: string[] }>;
  }>({
    completedGroups: [],
    pendingGroups: [],
    chuyenNganhGroups: new Map()
  });
  
  const axiosPrivate = useAxiosPrivate();
  const maSo = auth.user?.maSo || "";
  const khoaHoc = auth.user?.khoaHoc || "";
  const maNganh = auth.user?.maNganh || "";

  // Component for Tab Button - defined inside component to access setActiveTab
  const TabButton: React.FC<{
    tab: "select" | "selected" | "chuyenNganh" | "other" | "daiCuong" | "coSoNganh" | "chuyenNganh2" | "completionStatus";
    isActive: boolean;
    icon: React.ReactNode;
    children: React.ReactNode;
    count?: number;
  }> = ({ tab, isActive, icon, children, count }) => {
    return (
      <button
        onClick={() => setActiveTab(tab)}
        className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-all duration-200 font-medium ${
          isActive
            ? "bg-blue-500 text-white shadow-md"
            : "bg-white text-gray-600 hover:bg-gray-100 border border-gray-200"
        }`}
      >
        {icon}
        <span>{children}</span>
        {count !== undefined && count > 0 && (
          <span className={`ml-2 px-2 py-1 rounded-full text-xs font-bold ${
            isActive 
              ? "bg-white text-blue-500" 
              : "bg-blue-500 text-white"
          }`}>
            {count}
          </span>
        )}
      </button>
    );
  };

  // Use custom hook for h·ªçc k·ª≥ data
  const {
    namHocList,
    hocKyList,
    error: hocKyError,
    fetchHocKy,
    clearError: clearHocKyError
  } = useHocKyData(khoaHoc, maNganh);

  // Combine error states
  const combinedError = error || hocKyError;
  
  // Clear combined errors
  const clearCombinedError = useCallback(() => {
    setError(null);
    clearHocKyError();
  }, [clearHocKyError]);

  const fetchMaHocPhanInKHHT = useCallback(async () => {
    try {
      const response = await axiosPrivate.get(
        KHHT_SERVICE.GET_MAHP_IN_KHHT.replace(":maSo", maSo),
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${auth.token}`,
          },
          withCredentials: true,
        }
      );
        const maHocPhanList = response.data || [];
        setMaHocPhanInKHHT(maHocPhanList);
      
    } catch (err) {
      if (err && typeof err === "object" && "message" in err) {
        setError((err as { message: string }).message);
      } else {
        console.error(err);
      }
    }
  }, [axiosPrivate, maSo, auth.token]);
  // Fetch available h·ªçc ph·∫ßn
  const fetchAvailableHocPhan = useCallback(async () => {
    try {
      const response = await axiosPrivate.get(
        KHHT_SERVICE.CTDT_NOT_IN_KHHT.replace(":id", maSo)
          .replace(":khoaHoc", khoaHoc)
          .replace(":maNganh", maNganh)
      );
      
      // Lo·∫°i b·ªè h·ªçc ph·∫ßn tr√πng l·∫∑p d·ª±a tr√™n maHp
      const rawData = response.data.data || [];
      const uniqueHocPhan = rawData.filter((hocPhan: HocPhan, index: number, self: HocPhan[]) => 
        self.findIndex(hp => hp.maHp === hocPhan.maHp) === index
      );
      setAvailableHocPhan(uniqueHocPhan);
    } catch (err) {
      if (err && typeof err === "object" && "message" in err) {
        setError((err as { message: string }).message);
      } else {
        console.error(err);
      }
    }
  }, [axiosPrivate, maSo, khoaHoc, maNganh]);

  // Fetch Nh√≥m h·ªçc ph·∫ßn g·ª£i √Ω
  const fetchHocPhanGoiY = useCallback(async () => {
    try {
      const response = await axiosPrivate.post(
        KHHT_SERVICE.GET_HOCPHAN_BY_GOIY,
        { maSo: maSo, khoaHoc: khoaHoc, maNganh: maNganh },
        {
          headers: {
            "Content-Type": "application/json",
          },
          withCredentials: true,
        }
      );
      if (response.status !== 200 || response.data.code !== 200) {
        setError(`API returned code: ${response.data.code || response.status}`);
      }
      
      // Lo·∫°i b·ªè h·ªçc ph·∫ßn tr√πng l·∫∑p d·ª±a tr√™n maHp
      const rawData = response.data.data || [];
      const uniqueHocPhanGoiY = rawData.filter((hocPhan: HocPhan, index: number, self: HocPhan[]) => 
        self.findIndex(hp => hp.maHp === hocPhan.maHp) === index
      );
      
      setHocPhanGoiY(uniqueHocPhanGoiY);
    } catch (err) {
      if (err && typeof err === "object" && "message" in err) {
        setError((err as { message: string }).message);
        console.error(err);
      }
    }
  }, [axiosPrivate, khoaHoc, maNganh, maSo]);

  //Fetch h·ªçc ph·∫ßn c·∫£i thi·ªán
  const fetchHocPhanCaiThien = useCallback(async () => {
    try {
      const response = await axiosPrivate.get(
        KQHT_SERVICE.GET_HOC_PHAN_CAI_THIEN.replace(":maSo", maSo),
        {
          headers: {
            "Content-Type": "application/json",
          },
          withCredentials: true,
        }
      );
      const filtedHocPhanCaiThien: HocPhanCaiThien[] = response.data.data.map(
        (item: any) => {
          return {
            id: item.id,
            maHp: item.hocPhan.maHp,
            tenHp: item.hocPhan.tenHp,
            diemChu: item.diemChu,
            diemSo: item.diemSo,
            soTinChi: item.hocPhan.tinChi,
          } as HocPhanCaiThien;
        }
      );

      // Lo·∫°i b·ªè h·ªçc ph·∫ßn tr√πng l·∫∑p d·ª±a tr√™n maHp
      const uniqueHocPhanCaiThien = filtedHocPhanCaiThien.filter((hocPhan, index, self) => 
        self.findIndex(hp => hp.maHp === hocPhan.maHp) === index
      );

      setHocPhanCaiThien(uniqueHocPhanCaiThien);
    } catch (err) {
      if (err && typeof err === "object" && "message" in err) {
        setError((err as { message: string }).message);
      } else {
        console.error(err);
      }
    }
  }, [axiosPrivate, maSo]); // Fetch h·ªçc ph·∫ßn c·∫£i thi·ªán khi component mount

  // Fetch h·ªçc ph·∫ßn t·ª± ch·ªçn
  const fetchNhomHocPhanTuChon = useCallback(async () => {
    try {
      const response = await axiosPrivate.get(
        HOCPHAN_SERVICE.CTDT_HOC_PHAN_TU_CHON_LIST,
        {
          params: {
            khoaHoc: khoaHoc,
            maNganh: maNganh, // Assuming 6 is the ID for the desired major
          },
          headers: {
            "Content-Type": "application/json",
          },
          withCredentials: true,
        }
      );
      
      // Lo·∫°i b·ªè h·ªçc ph·∫ßn tr√πng l·∫∑p trong t·ª´ng nh√≥m h·ªçc ph·∫ßn t·ª± ch·ªçn
      const uniqueNhomHocPhanTuChon = (response.data.data || []).map((nhom: HocPhanTuChon) => ({
        ...nhom,
        hocPhanTuChonList: nhom.hocPhanTuChonList.filter((hocPhan, index, self) => 
          self.findIndex(hp => hp.maHp === hocPhan.maHp) === index
        )
      }));
      
      setNhomHocPhanTuChon(uniqueNhomHocPhanTuChon);
    } catch (err) {
      if (err && typeof err === "object" && "message" in err) {
        setError((err as { message: string }).message);
      } else {
        console.error(err);
      }
    }
  }, [axiosPrivate, khoaHoc, maNganh]);
  
  // Fetch h·ªçc ph·∫ßn theo lo·∫°i
  const fetchHocPhanByLoaiHp = useCallback(async (loaiHp: string) => {
    try {
      setLoadingLoaiHp(prev => ({ ...prev, [loaiHp]: true }));
      
      // Fetch both main courses and electives simultaneously
      const [mainResponse, electivesResponse] = await Promise.allSettled([
        axiosPrivate.post(
          HOCPHAN_SERVICE.CTDT_BY_LOAI_HP,
          { 
            loaiHp: loaiHp,
            khoaHoc: khoaHoc, 
            maNganh: maNganh 
          },
          {
            headers: {
              "Content-Type": "application/json",
            },
            withCredentials: true,
          }
        ),
        axiosPrivate.post(
          HOCPHAN_SERVICE.HOCPHAN_TUCHON_BY_LOAI_HP,
          { 
            loaiHp: loaiHp,
            khoaHoc: khoaHoc, 
            maNganh: maNganh 
          },
          {
            headers: {
              "Content-Type": "application/json",
            },
            withCredentials: true,
          }
        )
      ]);
      
      // Process main courses
      let mainCourses: HocPhan[] = [];
      if (mainResponse.status === 'fulfilled') {
        const rawMainData = mainResponse.value.data || [];
        mainCourses = rawMainData.filter((hocPhan: HocPhan, index: number, self: HocPhan[]) => 
          self.findIndex(hp => hp.maHp === hocPhan.maHp) === index
        );
        console.log(`Main courses ${loaiHp}:`, mainCourses);
      } else {
        console.error(`Error fetching main courses for ${loaiHp}:`, mainResponse.reason);
      }
      
      // Process electives - electivesResponse.value.data.data returns HocPhanTuChon[]
      let electiveCourses: HocPhan[] = [];
      let electiveGroups: HocPhanTuChon[] = [];
      if (electivesResponse.status === 'fulfilled') {
        console.log(`Electives response for ${loaiHp}:`, electivesResponse.value.data.data);
        const rawElectiveData: HocPhanTuChon[] = electivesResponse.value.data.data || [];
        
        // Store the full elective groups for t·ª± ch·ªçn state
        electiveGroups = rawElectiveData.filter(nhom => 
          nhom.tenNhom?.toLowerCase().includes(loaiHp.toLowerCase()) ||
          (loaiHp === "ƒê·∫°i C∆∞∆°ng" && (nhom.tenNhom?.toLowerCase().includes("ƒë·∫°i c∆∞∆°ng") || nhom.tenNhom?.toLowerCase().includes("dai cuong"))) ||
          (loaiHp === "C∆° S·ªü Ng√†nh" && (nhom.tenNhom?.toLowerCase().includes("c∆° s·ªü") || nhom.tenNhom?.toLowerCase().includes("co so"))) ||
          (loaiHp === "Chuy√™n Ng√†nh" && (nhom.tenNhom?.toLowerCase().includes("chuy√™n ng√†nh") || nhom.tenNhom?.toLowerCase().includes("chuyen nganh")))
        );
        
        // Extract HocPhan from HocPhanTuChon groups for merged display
        const extractedCourses: HocPhan[] = [];
        rawElectiveData.forEach(nhom => {
          if (nhom.hocPhanTuChonList && Array.isArray(nhom.hocPhanTuChonList)) {
            extractedCourses.push(...nhom.hocPhanTuChonList);
          }
        });
        
        // Remove duplicates
        electiveCourses = extractedCourses.filter((hocPhan: HocPhan, index: number, self: HocPhan[]) => 
          self.findIndex(hp => hp.maHp === hocPhan.maHp) === index
        );
        console.log(`Elective courses ${loaiHp}:`, electiveCourses);
        console.log(`Elective groups ${loaiHp}:`, electiveGroups);
      } else {
        console.error(`Error fetching electives for ${loaiHp}:`, electivesResponse.reason);
      }
      
      // Merge main and elective courses, removing duplicates
      const allCourses = [...mainCourses, ...electiveCourses];
      const uniqueMergedCourses = allCourses.filter((hocPhan, index, self) => 
        self.findIndex(hp => hp.maHp === hocPhan.maHp) === index
      );
      
      console.log(`Merged courses ${loaiHp}:`, uniqueMergedCourses);
      
      // Set data theo lo·∫°i h·ªçc ph·∫ßn (merged data)
      switch (loaiHp) {
        case "ƒê·∫°i C∆∞∆°ng":
          setHocPhanDaiCuong(uniqueMergedCourses);
          setHocPhanTuChonDaiCuong(electiveGroups);
          break;
        case "C∆° S·ªü Ng√†nh":
          setHocPhanCoSoNganh(uniqueMergedCourses);
          setHocPhanTuChonCoSoNganh(electiveGroups);
          break;
        case "Chuy√™n Ng√†nh":
          setHocPhanChuyenNganh(uniqueMergedCourses);
          setHocPhanTuChonChuyenNganh(electiveGroups);
          break;
        default:
          break;
      }
    } catch (err) {
      console.error(`Error fetching ${loaiHp} hoc phan:`, err);
      if (err && typeof err === "object" && "message" in err) {
        setError(`L·ªói t·∫£i ${loaiHp}: ${(err as { message: string }).message}`);
      } else {
        setError(`Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ªçc ph·∫ßn ${loaiHp}`);
      }
    } finally {
      setLoadingLoaiHp(prev => ({ ...prev, [loaiHp]: false }));
    }
  }, [axiosPrivate, khoaHoc, maNganh]);

  useEffect(() => {
    if (maSo) {
      fetchHocKy();
      fetchHocPhanCaiThien();
      fetchAvailableHocPhan();
      fetchNhomHocPhanTuChon();
      fetchHocPhanGoiY();
      fetchMaHocPhanInKHHT();
      
      // Fetch h·ªçc ph·∫ßn theo lo·∫°i
      fetchHocPhanByLoaiHp("ƒê·∫°i C∆∞∆°ng");
      fetchHocPhanByLoaiHp("C∆° S·ªü Ng√†nh");
      fetchHocPhanByLoaiHp("Chuy√™n Ng√†nh");
    }
  }, [
    maSo,
    fetchHocKy,
    fetchAvailableHocPhan,
    fetchNhomHocPhanTuChon,
    fetchHocPhanCaiThien,
    fetchHocPhanGoiY,
    fetchMaHocPhanInKHHT,
    fetchHocPhanByLoaiHp,
  ]);

  // Filter available h·ªçc ph·∫ßn (exclude selected ones)
  const filteredAvailableHocPhan = useMemo(() => {
    return availableHocPhan.filter(
      (hocPhan) =>
        !selectedHocPhan?.some((selected) => selected.maHp === hocPhan.maHp)
    );
  }, [availableHocPhan, selectedHocPhan]);  // Helper function ƒë·ªÉ t√≠nh t·ªïng t√≠n ch·ªâ ƒë√£ ch·ªçn cho m·ªôt nh√≥m (bao g·ªìm c·∫£ ƒë√£ l∆∞u v√† ƒëang ch·ªçn)
  const getTinChiDaChonTrongNhom = useCallback(
    (nhom: HocPhanTuChon) => {
      // T√≠n ch·ªâ t·ª´ h·ªçc ph·∫ßn ƒë√£ l∆∞u trong KHHT
      const tinChiDaLuu = nhom.hocPhanTuChonList
        .filter(hp => maHocPhanInKHHT.includes(hp.maHp))
        .reduce((total, hp) => total + hp.tinChi, 0);
      
      // T√≠n ch·ªâ t·ª´ h·ªçc ph·∫ßn ƒëang ch·ªçn (ch∆∞a l∆∞u)
      const tinChiDangChon = selectedHocPhan
        .filter((selected) =>
          nhom.hocPhanTuChonList.some((hp) => hp.maHp === selected.maHp) &&
          !maHocPhanInKHHT.includes(selected.maHp) // Kh√¥ng ƒë·∫øm tr√πng
        )
        .reduce((total, selected) => total + selected.tinChi, 0);
      
      return tinChiDaLuu + tinChiDangChon;
    },
    [selectedHocPhan, maHocPhanInKHHT]
  );// Add h·ªçc ph·∫ßn to selected list
  const addHocPhan = useCallback(
    (hocPhan: HocPhan, nhomId?: number) => {
      // N·∫øu c√≥ nhomId, hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu s·∫Ω v∆∞·ª£t qu√°
      if (nhomId !== undefined) {
        const nhom = NhomHocPhanTuChon.find((n) => n.id === nhomId);
        if (nhom) {
          const tinChiDaChon = getTinChiDaChonTrongNhom(nhom);
          const tinChiSauKhiThem = tinChiDaChon + hocPhan.tinChi;

          // Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu s·∫Ω v∆∞·ª£t qu√° y√™u c·∫ßu
          if (tinChiSauKhiThem > nhom.tinChiYeuCau) {
            setSuccess(
              `ƒê√£ th√™m "${hocPhan.tenHp}". L∆∞u √Ω: T·ªïng t√≠n ch·ªâ nh√≥m s·∫Ω l√† ${tinChiSauKhiThem}/${nhom.tinChiYeuCau} (v∆∞·ª£t ${tinChiSauKhiThem - nhom.tinChiYeuCau} t√≠n ch·ªâ).`
            );
          }
        }
      }

      setSelectedHocPhan((prev) => [
        ...prev,
        {
          maHp: hocPhan.maHp,
          tenHp: hocPhan.tenHp,
          tinChi: hocPhan.tinChi,
          loaiHp: hocPhan.loaiHp,
          hocPhanTienQuyet: hocPhan.hocPhanTienQuyet,
          maHocKy: 0,
          namHocId: 0,
        } as KeHoachHocTap,
      ]);
    },
    [NhomHocPhanTuChon, getTinChiDaChonTrongNhom]
  );

  // Remove h·ªçc ph·∫ßn from selected list
  const removeHocPhan = useCallback((maHp: string) => {
    setSelectedHocPhan((prev) =>
      prev.filter((hocPhan) => hocPhan.maHp !== maHp)
    );
  }, []);

  // Helper function ƒë·ªÉ ki·ªÉm tra h·ªçc ph·∫ßn ƒë√£ ƒë∆∞·ª£c th√™m v√†o k·∫ø ho·∫°ch ch∆∞a
  const isHocPhanAlreadyAdded = useCallback(
    (maHp: string) => {
      // Ki·ªÉm tra trong maHocPhanInKHHT, n·∫øu c√≥ th√¨ ƒë√£ ƒë∆∞·ª£c th√™m
      return maHocPhanInKHHT.includes(maHp);
    },
    [maHocPhanInKHHT]
  );

  // Save selected h·ªçc ph·∫ßn
  const handleSaveKHHT = async () => {
    const filteredData = selectedHocPhan.map((hocPhan) => ({
      maSo: maSo,
      maHocKy: hocPhan.maHocKy,
      maHocPhan: hocPhan.maHp,
    }));

    if (
      filteredData.some((item) => item.maHocKy === 0 || item.maHocPhan === "")
    ) {
      setError("Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß th√¥ng tin h·ªçc ph·∫ßn tr∆∞·ªõc khi l∆∞u.");
      return;
    }

    try {
      setFetchLoading(true);
      await axiosPrivate.post(KHHT_SERVICE.CREATE, filteredData);
      setSuccess("L∆∞u k·∫ø ho·∫°ch h·ªçc t·∫≠p th√†nh c√¥ng!");
      setSelectedHocPhan([]);
      // Refresh c·∫£ available h·ªçc ph·∫ßn v√† danh s√°ch m√£ h·ªçc ph·∫ßn trong KHHT
      fetchAvailableHocPhan();
      fetchMaHocPhanInKHHT();
    } catch (err) {
      setError((err as { message: string }).message);
    } finally {
      setFetchLoading(false);
    }
  };
  const availableColumns = useMemo<ColumnDef<HocPhan>[]>(
    () => [
      {
        accessorKey: "maHp",
        header: ({ column }) => (
          <SortableHeader column={column} title="M√£ h·ªçc ph·∫ßn" />
        ),
        cell: ({ row }) => (
          <div className="text-center">{row.getValue("maHp")}</div>
        ),
      },
      {
        accessorKey: "tenHp",
        header: ({ column }) => (
          <SortableHeader column={column} title="T√™n h·ªçc ph·∫ßn" />
        ),
        cell: ({ row }) => (
          <div className="text-left">{row.getValue("tenHp")}</div>
        ),
      },
      {
        accessorKey: "tinChi",
        header: ({ column }) => (
          <SortableHeader column={column} title="T√≠n ch·ªâ" />
        ),
        cell: ({ row }) => (
          <div className="text-center">{row.getValue("tinChi")}</div>
        ),
      },
      {
        accessorKey: "hocPhanTienQuyet",
        header: ({ column }) => (
          <SortableHeader column={column} title="Ti√™n quy·∫øt" />
        ),
        cell: ({ row }) => (
          <div className="text-center">
            {row.getValue("hocPhanTienQuyet") || "-"}
          </div>
        ),
      },
      {
        accessorKey: "action",
        header: "",
        cell: ({ row }) => {
          const hocPhan = row.original;
          const isAlreadyAdded = isHocPhanAlreadyAdded(hocPhan.maHp);
          const isCurrentlySelected = selectedHocPhan?.some((selected) => selected.maHp === hocPhan.maHp);
          
          if (isCurrentlySelected) {
            return (
              <div className="flex items-center justify-center">
                <span className="inline-block px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                  ƒê√£ ch·ªçn
                </span>
              </div>
            );
          }
          
          if (isAlreadyAdded) {
            return (
              <div className="flex items-center justify-center">
                <span className="inline-block px-3 py-1 bg-gray-100 text-gray-600 rounded-full text-xs font-medium">
                  ƒê√£ th√™m
                </span>
              </div>
            );
          }
          
          return (
            <div className="flex items-center justify-center">
              <button
                className="text-green-600 hover:text-green-700 p-2 rounded-lg transition-colors duration-200"
                onClick={() => addHocPhan(row.original)}
                title="Th√™m v√†o k·∫ø ho·∫°ch"
              >
                <CirclePlus className="h-5 w-5" />
              </button>
            </div>
          );
        },
      },
    ],
    [addHocPhan, isHocPhanAlreadyAdded, selectedHocPhan]
  );

  // Columns cho h·ªçc ph·∫ßn c·∫£i thi·ªán
  const createHocPhanCaiThienColumns = (): ColumnDef<HocPhanCaiThien>[] => [
    {
      accessorKey: "maHp",
      header: ({ column }) => (
        <SortableHeader column={column} title="M√£ h·ªçc ph·∫ßn" />
      ),
      cell: ({ row }) => (
        <div className="text-center">{row.getValue("maHp")}</div>
      ),
    },
    {
      accessorKey: "tenHp",
      header: ({ column }) => (
        <SortableHeader column={column} title="T√™n h·ªçc ph·∫ßn" />
      ),
      cell: ({ row }) => (
        <div className="text-left">{row.getValue("tenHp")}</div>
      ),
    },
    {
      accessorKey: "soTinChi",
      header: ({ column }) => (
        <SortableHeader column={column} title="T√≠n ch·ªâ" />
      ),
      cell: ({ row }) => (
        <div className="text-center">{row.getValue("soTinChi")}</div>
      ),
    },
    {
      accessorKey: "diemChu",
      header: ({ column }) => (
        <SortableHeader column={column} title="ƒêi·ªÉm ch·ªØ" />
      ),
      cell: ({ row }) => (
        <div className="text-center">
          <span className="inline-block px-2 py-1 bg-red-100 text-red-800 rounded-full text-sm font-medium">
            {row.getValue("diemChu")}
          </span>
        </div>
      ),
    },
    {
      accessorKey: "diemSo",
      header: ({ column }) => (
        <SortableHeader column={column} title="ƒêi·ªÉm s·ªë" />
      ),
      cell: ({ row }) => (
        <div className="text-center">
          <span className="inline-block px-2 py-1 bg-orange-100 text-orange-800 rounded-full text-sm font-medium">
            {row.getValue("diemSo") || "-"}
          </span>
        </div>
      ),
    },
    {
      accessorKey: "action",
      header: "",
      cell: ({ row }) => {
        // T·∫°o h·ªçc ph·∫ßn object t·ª´ d·ªØ li·ªáu c·∫£i thi·ªán ƒë·ªÉ c√≥ th·ªÉ th√™m v√†o k·∫ø ho·∫°ch
        const hocPhanToAdd: HocPhan = {
          maHp: row.original.maHp,
          tenHp: row.original.tenHp,
          tinChi: row.original.soTinChi,
          loaiHp: "C·∫£i thi·ªán",
          hocPhanTienQuyet: "",
        };

        const isAlreadyAdded = isHocPhanAlreadyAdded(hocPhanToAdd.maHp);
        const isCurrentlySelected = selectedHocPhan?.some((selected) => selected.maHp === hocPhanToAdd.maHp);
        
        if (isCurrentlySelected) {
          return (
            <div className="flex items-center justify-center">
              <span className="inline-block px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                ƒê√£ ch·ªçn
              </span>
            </div>
          );
        }
        
        if (isAlreadyAdded) {
          return (
            <div className="flex items-center justify-center">
              <span className="inline-block px-3 py-1 bg-gray-100 text-gray-600 rounded-full text-xs font-medium">
                ƒê√£ th√™m
              </span>
            </div>
          );
        }

        return (
          <div className="flex items-center justify-center">
            <button
              className="text-blue-600 hover:text-blue-700 p-2 rounded-lg transition-colors duration-200"
              onClick={() => addHocPhan(hocPhanToAdd)}
              title="Th√™m v√†o k·∫ø ho·∫°ch c·∫£i thi·ªán"
            >
              <CirclePlus className="h-5 w-5" />
            </button>
          </div>
        );
      },
    },
  ];
  // Selected h·ªçc ph·∫ßn columns
  const selectedColumns = useMemo<ColumnDef<KeHoachHocTap>[]>(
    () => [
      {
        accessorKey: "maHp",
        header: ({ column }) => (
          <SortableHeader column={column} title="M√£ h·ªçc ph·∫ßn" />
        ),
        cell: ({ row }) => (
          <div className="text-center">{row.getValue("maHp")}</div>
        ),
      },
      {
        accessorKey: "tenHp",
        header: ({ column }) => (
          <SortableHeader column={column} title="T√™n h·ªçc ph·∫ßn" />
        ),
        cell: ({ row }) => (
          <div className="text-left">{row.getValue("tenHp")}</div>
        ),
      },
      {
        accessorKey: "tinChi",
        header: ({ column }) => (
          <SortableHeader column={column} title="T√≠n ch·ªâ" />
        ),
        cell: ({ row }) => (
          <div className="text-center">{row.getValue("tinChi")}</div>
        ),
      },
      {
        accessorKey: "namHocId",
        header: "NƒÉm h·ªçc",
        cell: ({ row }) => (
          <select
            value={row.original.namHocId}
            onChange={(e) => {
              const newNamHocId = Number(e.target.value);
              setSelectedHocPhan((prev) =>
                prev.map((hocPhan) =>
                  hocPhan.maHp === row.getValue("maHp")
                    ? { ...hocPhan, namHocId: newNamHocId, maHocKy: 0 }
                    : hocPhan
                )
              );
            }}
            className="border border-gray-300 rounded-lg px-3 py-1.5 w-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200"
          >
            <option value={0}>Ch·ªçn nƒÉm h·ªçc</option>
            {namHocList.map((item) => (
              <option key={item.id} value={item.id}>
                {item.tenNamHoc}
              </option>
            ))}
          </select>
        ),
      },
      {
        accessorKey: "maHocKy",
        header: "H·ªçc k·ª≥",
        cell: ({ row }) => (
          <select
            value={row.original.maHocKy}
            onChange={(e) => {
              const newHocKyId = Number(e.target.value);
              setSelectedHocPhan((prev) =>
                prev.map((hocPhan) =>
                  hocPhan.maHp === row.getValue("maHp")
                    ? { ...hocPhan, maHocKy: newHocKyId }
                    : hocPhan
                )
              );
            }}
            className="border border-gray-300 rounded-lg px-3 py-1.5 w-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200"
          >
            <option value={0}>Ch·ªçn h·ªçc k·ª≥</option>
            {hocKyList
              .filter(
                (hk) =>
                  hk.namHocId ===
                  (row.original.namHocId || namHocList[0]?.id || 0)
              )
              .map((item) => (
                <option key={item.id} value={item.id}>
                  {item.tenHocky}
                </option>
              ))}
          </select>
        ),
      },
      {
        accessorKey: "action",
        header: "",
        cell: ({ row }) => (
          <div className="flex items-center justify-center">
            <button
              className="text-red-600 hover:text-red-800 p-2 rounded-lg transition-colors duration-200"
              onClick={() => removeHocPhan(row.getValue("maHp"))}
              title="X√≥a kh·ªèi k·∫ø ho·∫°ch"
            >
              <Trash2 className="h-5 w-5" />
            </button>
          </div>
        ),
      },
    ],
    [namHocList, hocKyList, removeHocPhan]
  );

  // T·ªëi ∆∞u h√≥a filter logic v·ªõi useMemo
  const filteredHocPhanGoiY = useMemo(() => {
    return hocPhanGoiY.filter(
      (hocPhan) =>
        !selectedHocPhan?.some((selected) => selected.maHp === hocPhan.maHp)
    );
  }, [hocPhanGoiY, selectedHocPhan]);

  const filteredHocPhanCaiThien = useMemo(() => {
    return hocPhanCaiThien.filter(
      (hocPhan) =>
        !selectedHocPhan?.some((selected) => selected.maHp === hocPhan.maHp)
    );
  }, [hocPhanCaiThien, selectedHocPhan]);

  // Filter h·ªçc ph·∫ßn theo lo·∫°i (exclude selected ones)
  const filteredHocPhanDaiCuong = useMemo(() => {
    return hocPhanDaiCuong.filter(
      (hocPhan) =>
        !selectedHocPhan?.some((selected) => selected.maHp === hocPhan.maHp)
    );
  }, [hocPhanDaiCuong, selectedHocPhan]);

  const filteredHocPhanCoSoNganh = useMemo(() => {
    return hocPhanCoSoNganh.filter(
      (hocPhan) =>
        !selectedHocPhan?.some((selected) => selected.maHp === hocPhan.maHp)
    );
  }, [hocPhanCoSoNganh, selectedHocPhan]);

  const filteredHocPhanChuyenNganh = useMemo(() => {
    return hocPhanChuyenNganh.filter(
      (hocPhan) =>
        !selectedHocPhan?.some((selected) => selected.maHp === hocPhan.maHp)
    );
  }, [hocPhanChuyenNganh, selectedHocPhan]);

  // Helper function ƒë·ªÉ ph√¢n lo·∫°i nh√≥m h·ªçc ph·∫ßn
  const categorizeNhomHocPhan = useMemo(() => {
    const chuyenNganhGroups = new Map<string, HocPhanTuChon[]>();
    const other: HocPhanTuChon[] = [];

    NhomHocPhanTuChon.forEach(nhom => {
      // Ki·ªÉm tra nh√≥m chuy√™n ng√†nh (c√≥ d·∫°ng "T√™n CN1", "T√™n CN2", v.v.)
      const chuyenNganhMatch = nhom.tenNhom?.match(/^(.+\s+CN)\d+$/);
      if (chuyenNganhMatch) {
        const baseName = chuyenNganhMatch[1]; // L·∫•y ph·∫ßn "T√™n CN"
        if (!chuyenNganhGroups.has(baseName)) {
          chuyenNganhGroups.set(baseName, []);
        }
        chuyenNganhGroups.get(baseName)!.push(nhom);
        return;
      }
      
      // C√°c nh√≥m kh√°c
      other.push(nhom);
    });

    return {
      chuyenNganh: Array.from(chuyenNganhGroups.entries()),
      other
    };
  }, [NhomHocPhanTuChon]);

  // Helper function ƒë·ªÉ ki·ªÉm tra v√† t√≠nh tr·∫°ng th√°i ho√†n th√†nh cho nh√≥m chuy√™n ng√†nh c√≥ ƒë√°nh s·ªë
  const getChuyenNganhCompletionStatus = useCallback(
    (nhomList: HocPhanTuChon[]) => {
      const chuyenNganhGroups = new Map<string, HocPhanTuChon[]>();
      
      // Nh√≥m c√°c chuy√™n ng√†nh theo t√™n g·ªëc (lo·∫°i b·ªè s·ªë ƒë√°nh s·ªë cu·ªëi)
      nhomList.forEach(nhom => {
        const tenNhom = nhom.tenNhom || '';
        // Ki·ªÉm tra n·∫øu t√™n nh√≥m c√≥ d·∫°ng "T√™n CN1", "T√™n CN2", v.v.
        const match = tenNhom.match(/^(.+\s+CN)\d+$/);
        if (match) {
          const baseName = match[1]; // L·∫•y ph·∫ßn "T√™n CN"
          if (!chuyenNganhGroups.has(baseName)) {
            chuyenNganhGroups.set(baseName, []);
          }
          chuyenNganhGroups.get(baseName)!.push(nhom);
        }
      });

      // T√≠nh tr·∫°ng th√°i ho√†n th√†nh
      const completionStatus = new Map<number, boolean>();
      
      chuyenNganhGroups.forEach((relatedGroups) => {
        // Ki·ªÉm tra xem c√≥ nh√≥m n√†o ƒë√£ ho√†n th√†nh kh√¥ng (d·ª±a tr√™n c·∫£ ƒë√£ l∆∞u v√† ƒëang ch·ªçn)
        const hasCompletedGroup = relatedGroups.some(nhom => {
          const tinChiDaChon = getTinChiDaChonTrongNhom(nhom);
          return tinChiDaChon >= nhom.tinChiYeuCau;
        });

        // N·∫øu c√≥ √≠t nh·∫•t 1 nh√≥m ho√†n th√†nh, ƒë√°nh d·∫•u t·∫•t c·∫£ c√°c nh√≥m li√™n quan l√† ho√†n th√†nh
        if (hasCompletedGroup) {
          relatedGroups.forEach(nhom => {
            completionStatus.set(nhom.id, true);
          });
        }
      });

      return completionStatus;
    },
    [getTinChiDaChonTrongNhom]
  );

  // H√†m ki·ªÉm tra tr·∫°ng th√°i ho√†n th√†nh c·ªßa t·∫•t c·∫£ c√°c nh√≥m h·ªçc ph·∫ßn khi v√†o trang
  const checkCompletionStatusForAllGroups = useCallback(() => {
    if (NhomHocPhanTuChon.length === 0 || maHocPhanInKHHT.length === 0) {
      return;
    }

    console.log("=== KI·ªÇM TRA TR·∫†NG TH√ÅI HO√ÄN TH√ÄNH C√ÅC NH√ìM H·ªåC PH·∫¶N ===");
    
    const completedGroups: string[] = [];
    const pendingGroups: string[] = [];

    // T·∫°o map ƒë·ªÉ theo d√µi c√°c nh√≥m chuy√™n ng√†nh (c√≥ ƒë√°nh s·ªë)
    const chuyenNganhGroupsMap = new Map<string, { 
      nhomList: HocPhanTuChon[]; 
      hasCompletedGroup: boolean; 
    }>();

    // Ph√¢n lo·∫°i c√°c nh√≥m c√≥ ƒë√°nh s·ªë v√† nh√≥m th∆∞·ªùng
    const regularGroups: HocPhanTuChon[] = [];

    NhomHocPhanTuChon.forEach(nhom => {
      // Ki·ªÉm tra n·∫øu nh√≥m c√≥ d·∫°ng "T√™n CN1", "T√™n CN2", v.v.
      const chuyenNganhMatch = nhom.tenNhom?.match(/^(.+\s+CN)\d+$/);
      if (chuyenNganhMatch) {
        const baseName = chuyenNganhMatch[1]; // L·∫•y ph·∫ßn "T√™n CN"
        
        if (!chuyenNganhGroupsMap.has(baseName)) {
          chuyenNganhGroupsMap.set(baseName, {
            nhomList: [],
            hasCompletedGroup: false
          });
        }
        
        chuyenNganhGroupsMap.get(baseName)!.nhomList.push(nhom);
      } else {
        regularGroups.push(nhom);
      }
    });

    // Ki·ªÉm tra tr·∫°ng th√°i ho√†n th√†nh cho c√°c nh√≥m chuy√™n ng√†nh (c√≥ ƒë√°nh s·ªë)
    chuyenNganhGroupsMap.forEach((groupInfo, baseName) => {
      const hasCompletedGroup = groupInfo.nhomList.some(nhom => {
        const tinChiDaHoanThanh = nhom.hocPhanTuChonList
          .filter(hp => maHocPhanInKHHT.includes(hp.maHp))
          .reduce((total, hp) => total + hp.tinChi, 0);
        return tinChiDaHoanThanh >= nhom.tinChiYeuCau;
      });
      
      groupInfo.hasCompletedGroup = hasCompletedGroup;
      
      if (hasCompletedGroup) {
        // N·∫øu m·ªôt trong c√°c nh√≥m ƒë√£ ho√†n th√†nh, ƒë√°nh d·∫•u to√†n b·ªô nh√≥m base n√†y l√† ho√†n th√†nh
        const completedSubgroup = groupInfo.nhomList.find(nhom => {
          const tinChiDaHoanThanh = nhom.hocPhanTuChonList
            .filter(hp => maHocPhanInKHHT.includes(hp.maHp))
            .reduce((total, hp) => total + hp.tinChi, 0);
          return tinChiDaHoanThanh >= nhom.tinChiYeuCau;
        });
        
        if (completedSubgroup) {
          const tinChiDaHoanThanh = completedSubgroup.hocPhanTuChonList
            .filter(hp => maHocPhanInKHHT.includes(hp.maHp))
            .reduce((total, hp) => total + hp.tinChi, 0);
          completedGroups.push(`${baseName} (ho√†n th√†nh qua ${completedSubgroup.tenNhom}: ${tinChiDaHoanThanh}/${completedSubgroup.tinChiYeuCau} t√≠n ch·ªâ)`);
        }
      } else {
        // N·∫øu ch∆∞a c√≥ nh√≥m n√†o ho√†n th√†nh, hi·ªÉn th·ªã ti·∫øn ƒë·ªô c·ªßa t·∫•t c·∫£ c√°c nh√≥m con
        const progressDetails = groupInfo.nhomList.map(nhom => {
          const tinChiDaHoanThanh = nhom.hocPhanTuChonList
            .filter(hp => maHocPhanInKHHT.includes(hp.maHp))
            .reduce((total, hp) => total + hp.tinChi, 0);
          return `${nhom.tenNhom}: ${tinChiDaHoanThanh}/${nhom.tinChiYeuCau}`;
        }).join(', ');
        
        pendingGroups.push(`${baseName} (${progressDetails})`);
      }
    });

    // Ki·ªÉm tra c√°c nh√≥m th∆∞·ªùng (kh√¥ng c√≥ ƒë√°nh s·ªë)
    regularGroups.forEach(nhom => {
      const tinChiDaHoanThanh = nhom.hocPhanTuChonList
        .filter(hp => maHocPhanInKHHT.includes(hp.maHp))
        .reduce((total, hp) => total + hp.tinChi, 0);

      const isCompleted = tinChiDaHoanThanh >= nhom.tinChiYeuCau;
      
      if (isCompleted) {
        completedGroups.push(`${nhom.tenNhom} (${tinChiDaHoanThanh}/${nhom.tinChiYeuCau} t√≠n ch·ªâ)`);
      } else {
        pendingGroups.push(`${nhom.tenNhom} (${tinChiDaHoanThanh}/${nhom.tinChiYeuCau} t√≠n ch·ªâ)`);
      }
    });

    // T·∫°o chuyenNganhGroups cho UI display
    const chuyenNganhGroups = new Map<string, { completed: boolean; details: string[] }>();
    
    chuyenNganhGroupsMap.forEach((groupInfo, baseName) => {
      const details = groupInfo.nhomList.map(nhom => {
        const tinChiDaHoanThanh = nhom.hocPhanTuChonList
          .filter(hp => maHocPhanInKHHT.includes(hp.maHp))
          .reduce((total, hp) => total + hp.tinChi, 0);
        const status = tinChiDaHoanThanh >= nhom.tinChiYeuCau ? "‚úÖ" : "‚è≥";
        return `  ${status} ${nhom.tenNhom}: ${tinChiDaHoanThanh}/${nhom.tinChiYeuCau} t√≠n ch·ªâ`;
      });

      chuyenNganhGroups.set(baseName, {
        completed: groupInfo.hasCompletedGroup,
        details
      });
    });

    // C·∫≠p nh·∫≠t state ƒë·ªÉ hi·ªÉn th·ªã tr√™n UI
    setCompletionStatus({
      completedGroups,
      pendingGroups,
      chuyenNganhGroups
    });

    // Log k·∫øt qu·∫£
    console.log("\nüìä T·ªîNG K·∫æT TR·∫†NG TH√ÅI:");
    console.log(`‚úÖ Nh√≥m ƒë√£ ho√†n th√†nh: ${completedGroups.length}`);
    console.log(`‚è≥ Nh√≥m ch∆∞a ho√†n th√†nh: ${pendingGroups.length}`);
    
    if (completedGroups.length > 0) {
      console.log("\n‚úÖ C√ÅC NH√ìM ƒê√É HO√ÄN TH√ÄNH:");
      completedGroups.forEach(group => console.log(`  ${group}`));
    }
    
    if (pendingGroups.length > 0) {
      console.log("\n‚è≥ C√ÅC NH√ìM CH∆ØA HO√ÄN TH√ÄNH:");
      pendingGroups.forEach(group => console.log(`  ${group}`));
    }

    if (chuyenNganhGroups.size > 0) {
      console.log("\nüéì NH√ìM CHUY√äN NG√ÄNH (ch·ªâ c·∫ßn ho√†n th√†nh 1 trong c√°c nh√≥m c√πng t√™n):");
      chuyenNganhGroups.forEach((info, baseName) => {
        const status = info.completed ? "‚úÖ ƒê√É HO√ÄN TH√ÄNH" : "‚è≥ CH∆ØA HO√ÄN TH√ÄNH";
        console.log(`${baseName}: ${status}`);
        info.details.forEach(detail => console.log(detail));
      });
    }

    console.log("=== K·∫æT TH√öC KI·ªÇM TRA ===\n");
  }, [NhomHocPhanTuChon, maHocPhanInKHHT]);

  // Th√™m useEffect ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ho√†n th√†nh khi v√†o trang ho·∫∑c khi c√≥ thay ƒë·ªïi
  useEffect(() => {
    // Ch·ªâ ki·ªÉm tra khi ƒë√£ c√≥ ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu
    if (NhomHocPhanTuChon.length > 0 && maHocPhanInKHHT.length >= 0) {
      checkCompletionStatusForAllGroups();
    }
  }, [NhomHocPhanTuChon, maHocPhanInKHHT, selectedHocPhan, checkCompletionStatusForAllGroups]);

  if (combinedError && !selectedHocPhan.length) return <Error error={combinedError} />;



  return (
    <div className="container mx-auto p-4 space-y-6">
      <>
          {/* Tab Navigation */}
          <div className="flex flex-wrap justify-between items-start gap-2 mb-6">
          {/* Left side tabs */}
          <div className="flex flex-wrap gap-2">
            <TabButton 
              tab="select" 
              isActive={activeTab === "select"}
              icon={<CirclePlus className="h-5 w-5" />}
            >
              Ch·ªçn h·ªçc ph·∫ßn
            </TabButton>
            
            {/* Tab ƒê·∫°i c∆∞∆°ng */}
            <TabButton 
              tab="daiCuong" 
              isActive={activeTab === "daiCuong"}
              icon={<BookOpen className="h-5 w-5" />}
              count={filteredHocPhanDaiCuong.length + hocPhanTuChonDaiCuong.reduce((total, group) => total + group.hocPhanTuChonList.length, 0)}
            >
              ƒê·∫°i c∆∞∆°ng
            </TabButton>
            
            {/* Tab C∆° s·ªü ng√†nh */}
            <TabButton 
              tab="coSoNganh" 
              isActive={activeTab === "coSoNganh"}
              icon={<SquareLibrary className="h-5 w-5" />}
              count={filteredHocPhanCoSoNganh.length + hocPhanTuChonCoSoNganh.reduce((total, group) => total + group.hocPhanTuChonList.length, 0)}
            >
              C∆° s·ªü ng√†nh
            </TabButton>
            
            {/* Tab Chuy√™n ng√†nh (t·ª´ API + nh√≥m t·ª± ch·ªçn) */}
            <TabButton 
              tab="chuyenNganh2" 
              isActive={activeTab === "chuyenNganh2"}
              icon={<Users className="h-5 w-5" />}
              count={filteredHocPhanChuyenNganh.length + hocPhanTuChonChuyenNganh.reduce((total, group) => total + group.hocPhanTuChonList.length, 0) + categorizeNhomHocPhan.chuyenNganh.reduce((total, [, nhomList]) => total + nhomList.reduce((sum, nhom) => sum + nhom.hocPhanTuChonList.length, 0), 0)}
            >
              Chuy√™n ng√†nh
            </TabButton>

            {/* Tab T√¨nh tr·∫°ng ho√†n th√†nh */}
            <TabButton 
              tab="completionStatus" 
              isActive={activeTab === "completionStatus"}
              icon={<BarChart3 className="h-5 w-5" />}
            >
              T√¨nh tr·∫°ng ho√†n th√†nh
            </TabButton>
            
            {/* Tab nh√≥m th·ªÉ ch·∫•t */}
            {/* Removed as per user request */}
            {/* {categorizeNhomHocPhan.theChat.length > 0 && (
              <TabButton 
                tab="theChat" 
                isActive={activeTab === "theChat"}
                icon={<Dumbbell className="h-5 w-5" />}
              >
                Th·ªÉ ch·∫•t
              </TabButton>
            )} */}
          </div>
          
          {/* Right side tab */}
          <div className="flex">
            <TabButton 
              tab="selected" 
              isActive={activeTab === "selected"}
              icon={<SquareLibrary className="h-5 w-5" />}
              count={selectedHocPhan.length}
            >
              H·ªçc ph·∫ßn ƒë√£ ch·ªçn
            </TabButton>
          </div>
        </div>

        {/* Tab Content */}
        {activeTab === "select" ? (
          <div className="space-y-6">
            {/* Available h·ªçc ph·∫ßn table */}
            <KeHoachHocTapTable
              name="Danh s√°ch h·ªçc ph·∫ßn c√≥ th·ªÉ th√™m"
              data={filteredAvailableHocPhan}
              columns={availableColumns}
              initialExpanded={true}
              loading={false}
            />
            
            {/* B·∫£ng h·ªçc ph·∫ßn g·ª£i √Ω */}
            {filteredHocPhanGoiY && filteredHocPhanGoiY.length > 0 && (
              <div className="space-y-2">
                <SectionHeader
                  title="H·ªçc ph·∫ßn g·ª£i √Ω"
                  description={`C√°c h·ªçc ph·∫ßn ph√π h·ª£p v·ªõi ti·∫øn ƒë·ªô h·ªçc t·∫≠p c·ªßa b·∫°n - C√≥ ${filteredHocPhanGoiY.length} m√¥n ƒë∆∞·ª£c g·ª£i √Ω`}
                  icon={
                    <div className="flex items-center space-x-3">
                      <StatusBadge color="emerald">{filteredHocPhanGoiY.length} m√¥n h·ªçc</StatusBadge>
                      <StatusBadge color="blue">ƒê∆∞·ª£c g·ª£i √Ω</StatusBadge>
                    </div>
                  }
                  colorScheme="emerald"
                />
                <KeHoachHocTapTable
                  name="H·ªçc ph·∫ßn ƒë∆∞·ª£c g·ª£i √Ω"
                  data={filteredHocPhanGoiY}
                  columns={availableColumns}
                  initialExpanded={false}
                  loading={false}
                />
              </div>
            )}

            {/* B·∫£ng h·ªçc ph·∫ßn c·∫£i thi·ªán */}
            {filteredHocPhanCaiThien && filteredHocPhanCaiThien.length > 0 && (
              <div className="space-y-2">
                <SectionHeader
                  title="H·ªçc ph·∫ßn c·∫£i thi·ªán"
                  description={`C√°c h·ªçc ph·∫ßn c√≥ ƒëi·ªÉm ch∆∞a ƒë·∫°t c·∫ßn c·∫£i thi·ªán - C√≥ ${filteredHocPhanCaiThien.length} m√¥n c√≥ th·ªÉ c·∫£i thi·ªán`}
                  icon={
                    <div className="flex items-center space-x-3">
                      <StatusBadge color="orange">{filteredHocPhanCaiThien.length} m√¥n h·ªçc</StatusBadge>
                      <StatusBadge color="red">C·∫ßn c·∫£i thi·ªán</StatusBadge>
                    </div>
                  }
                  colorScheme="orange"
                />
                <KeHoachHocTapTable
                  name="H·ªçc ph·∫ßn c·∫ßn c·∫£i thi·ªán"
                  data={filteredHocPhanCaiThien}
                  columns={createHocPhanCaiThienColumns()}
                  initialExpanded={false}
                  loading={false}
                />
              </div>
            )}
          </div>
        ) : activeTab === "daiCuong" ? (
          <div className="space-y-6">
            <SectionHeader
              title="H·ªçc ph·∫ßn ƒê·∫°i c∆∞∆°ng"
              description={`Bao g·ªìm c·∫£ h·ªçc ph·∫ßn b·∫Øt bu·ªôc v√† t·ª± ch·ªçn thu·ªôc nh√≥m ƒê·∫°i c∆∞∆°ng${(filteredHocPhanDaiCuong.length + hocPhanTuChonDaiCuong.reduce((total, group) => total + group.hocPhanTuChonList.length, 0)) > 0 ? ` - T·ªïng c·ªông ${filteredHocPhanDaiCuong.length + hocPhanTuChonDaiCuong.reduce((total, group) => total + group.hocPhanTuChonList.length, 0)} m√¥n h·ªçc` : ""}${hocPhanTuChonDaiCuong.length > 0 ? ` ‚ú® Trong ƒë√≥ c√≥ ${filteredHocPhanDaiCuong.filter(hp => !hocPhanTuChonDaiCuong.some(group => group.hocPhanTuChonList.some(tc => tc.maHp === hp.maHp))).length} m√¥n b·∫Øt bu·ªôc v√† ${hocPhanTuChonDaiCuong.reduce((total, group) => total + group.hocPhanTuChonList.length, 0)} m√¥n t·ª± ch·ªçn` : ""}`}
              icon={<BookOpen className="h-8 w-8" />}
              colorScheme="blue"
              loading={loadingLoaiHp["ƒê·∫°i C∆∞∆°ng"]}
            />
            
            <CourseSection
              sectionName="ƒê·∫°i c∆∞∆°ng"
              mainCourses={filteredHocPhanDaiCuong}
              electiveGroups={hocPhanTuChonDaiCuong}
              columns={availableColumns}
              loading={loadingLoaiHp["ƒê·∫°i C∆∞∆°ng"] || false}
              getTinChiDaChonTrongNhom={getTinChiDaChonTrongNhom}
              getChuyenNganhCompletionStatus={getChuyenNganhCompletionStatus}
              selectedHocPhan={selectedHocPhan}
              onAddHocPhan={addHocPhan}
              isHocPhanAlreadyAdded={isHocPhanAlreadyAdded}
            />
          </div>
        ) : activeTab === "coSoNganh" ? (
          <div className="space-y-6">
            <SectionHeader
              title="H·ªçc ph·∫ßn C∆° s·ªü ng√†nh"
              description={`Bao g·ªìm c·∫£ h·ªçc ph·∫ßn b·∫Øt bu·ªôc v√† t·ª± ch·ªçn thu·ªôc nh√≥m C∆° s·ªü ng√†nh${(filteredHocPhanCoSoNganh.length + hocPhanTuChonCoSoNganh.reduce((total, group) => total + group.hocPhanTuChonList.length, 0)) > 0 ? ` - T·ªïng c·ªông ${filteredHocPhanCoSoNganh.length + hocPhanTuChonCoSoNganh.reduce((total, group) => total + group.hocPhanTuChonList.length, 0)} m√¥n h·ªçc` : ""}${hocPhanTuChonCoSoNganh.length > 0 ? ` ‚ú® Trong ƒë√≥ c√≥ ${filteredHocPhanCoSoNganh.filter(hp => !hocPhanTuChonCoSoNganh.some(group => group.hocPhanTuChonList.some(tc => tc.maHp === hp.maHp))).length} m√¥n b·∫Øt bu·ªôc v√† ${hocPhanTuChonCoSoNganh.reduce((total, group) => total + group.hocPhanTuChonList.length, 0)} m√¥n t·ª± ch·ªçn` : ""}`}
              icon={<SquareLibrary className="h-8 w-8" />}
              colorScheme="emerald"
              loading={loadingLoaiHp["C∆° S·ªü Ng√†nh"]}
            />
            
            <CourseSection
              sectionName="C∆° s·ªü ng√†nh"
              mainCourses={filteredHocPhanCoSoNganh}
              electiveGroups={hocPhanTuChonCoSoNganh}
              columns={availableColumns}
              loading={loadingLoaiHp["C∆° S·ªü Ng√†nh"] || false}
              getTinChiDaChonTrongNhom={getTinChiDaChonTrongNhom}
              getChuyenNganhCompletionStatus={getChuyenNganhCompletionStatus}
              selectedHocPhan={selectedHocPhan}
              onAddHocPhan={addHocPhan}
              isHocPhanAlreadyAdded={isHocPhanAlreadyAdded}
            />
          </div>
        ) : activeTab === "chuyenNganh2" ? (
          <div className="space-y-6">
            <div className="bg-gradient-to-r from-purple-50 to-violet-50 border border-purple-200 rounded-lg p-4 mb-4">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold text-purple-800 mb-1">
                    H·ªçc ph·∫ßn Chuy√™n ng√†nh
                  </h3>
                  <p className="text-purple-600 text-sm">
                    Bao g·ªìm h·ªçc ph·∫ßn b·∫Øt bu·ªôc, t·ª± ch·ªçn v√† c√°c nh√≥m chuy√™n ng√†nh theo lƒ©nh v·ª±c
                    {filteredHocPhanChuyenNganh.length > 0 && (
                      <span className="ml-2 text-purple-700">
                        - T·ªïng c·ªông{" "}
                        <span className="font-medium">
                          {filteredHocPhanChuyenNganh.length}
                        </span>{" "}
                        m√¥n h·ªçc t·ª´ CTDT
                      </span>
                    )}
                  </p>
                  {hocPhanTuChonChuyenNganh.length > 0 && (
                    <p className="text-purple-500 text-xs mt-1">
                      ‚ú® Trong ƒë√≥ c√≥ {hocPhanTuChonChuyenNganh.length} m√¥n t·ª± ch·ªçn
                    </p>
                  )}
                  {categorizeNhomHocPhan.chuyenNganh.length > 0 && (
                    <p className="text-purple-500 text-xs mt-1">
                      üéØ V√† {categorizeNhomHocPhan.chuyenNganh.length} nh√≥m chuy√™n ng√†nh t·ª± ch·ªçn
                    </p>
                  )}
                </div>
                <div className="flex items-center space-x-3">
                  <Users className="h-8 w-8 text-purple-600" />
                  {loadingLoaiHp["Chuy√™n Ng√†nh"] && (
                    <div className="flex items-center space-x-2 text-purple-600">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-purple-600"></div>
                      <span className="text-sm">ƒêang t·∫£i...</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
            
            {/* H·ªçc ph·∫ßn chuy√™n ng√†nh t·ª´ CTDT */}
            <KeHoachHocTapTable
              name="H·ªçc ph·∫ßn Chuy√™n ng√†nh (B·∫Øt bu·ªôc + T·ª± ch·ªçn)"
              data={filteredHocPhanChuyenNganh}
              columns={availableColumns}
              initialExpanded={true}
              loading={loadingLoaiHp["Chuy√™n Ng√†nh"] || false}
            />
            
            {/* Nh√≥m h·ªçc ph·∫ßn chuy√™n ng√†nh t·ª± ch·ªçn */}
            {categorizeNhomHocPhan.chuyenNganh.length > 0 && (
              <div className="space-y-6 mt-8">
                <div className="bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200 rounded-lg p-4 mb-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-semibold text-indigo-800 mb-1">
                        Nh√≥m h·ªçc ph·∫ßn chuy√™n ng√†nh t·ª± ch·ªçn
                      </h3>
                      <p className="text-indigo-600 text-sm">
                        C√°c nh√≥m h·ªçc ph·∫ßn chuy√™n ng√†nh theo t·ª´ng lƒ©nh v·ª±c
                      </p>
                      {/* Hi·ªÉn th·ªã t·ªïng quan t√≠n ch·ªâ y√™u c·∫ßu */}
                      <div className="mt-2 flex flex-wrap gap-1 text-xs">
                        {categorizeNhomHocPhan.chuyenNganh.map(([baseName, nhomList]) => {
                          const hasCompleted = nhomList.some(nhom => {
                            const tinChiDaChon = getTinChiDaChonTrongNhom(nhom);
                            return tinChiDaChon >= nhom.tinChiYeuCau;
                          });
                          return (
                            <span 
                              key={baseName}
                              className={`inline-flex items-center px-2 py-1 rounded-full font-medium ${
                                hasCompleted 
                                  ? "bg-green-100 text-green-800" 
                                  : "bg-indigo-100 text-indigo-800"
                              }`}
                            >
                              {baseName}: {nhomList.length} nh√≥m
                              {hasCompleted && <span className="ml-1">‚úì</span>}
                            </span>
                          );
                        })}
                      </div>
                      <div className="mt-2 p-2 bg-indigo-100 rounded-lg">
                        <p className="text-xs text-indigo-700 font-medium">
                          üí° <strong>L∆∞u √Ω quan tr·ªçng:</strong> ƒê·ªëi v·ªõi c√°c nh√≥m c√≥ ƒë√°nh s·ªë (v√≠ d·ª•: CN1, CN2, CN3...), 
                          b·∫°n ch·ªâ c·∫ßn ho√†n th√†nh <strong>m·ªôt trong c√°c nh√≥m</strong> l√† ƒë·ªß. 
                          Khi m·ªôt nh√≥m ƒë√£ ho√†n th√†nh, to√†n b·ªô nh√≥m chuy√™n ng√†nh ƒë√≥ s·∫Ω ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ho√†n th√†nh.
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-3">
                      <Users className="h-8 w-8 text-indigo-600" />
                    </div>
                  </div>
                </div>
                
                {categorizeNhomHocPhan.chuyenNganh.map(([baseName, nhomList]) => {
                  // T√≠nh tr·∫°ng th√°i ho√†n th√†nh cho nh√≥m chuy√™n ng√†nh n√†y d·ª±a tr√™n maHocPhanInKHHT
                  // Ch·ªâ c·∫ßn 1 trong c√°c nh√≥m con (CN1, CN2, ...) ho√†n th√†nh l√† ƒë·ªß
                  const hasCompletedGroup = nhomList.some(nhom => {
                    const tinChiDaHoanThanh = nhom.hocPhanTuChonList
                      .filter(hp => maHocPhanInKHHT.includes(hp.maHp))
                      .reduce((total, hp) => total + hp.tinChi, 0);
                    return tinChiDaHoanThanh >= nhom.tinChiYeuCau;
                  });

                  // T√¨m nh√≥m con ƒë√£ ho√†n th√†nh (n·∫øu c√≥)
                  const completedSubgroup = nhomList.find(nhom => {
                    const tinChiDaHoanThanh = nhom.hocPhanTuChonList
                      .filter(hp => maHocPhanInKHHT.includes(hp.maHp))
                      .reduce((total, hp) => total + hp.tinChi, 0);
                    return tinChiDaHoanThanh >= nhom.tinChiYeuCau;
                  });

                  return (
                    <div key={baseName} className="space-y-2">
                      <div className={`bg-gradient-to-r border rounded-lg p-3 ${
                        hasCompletedGroup 
                          ? "from-green-50 to-emerald-50 border-green-200" 
                          : "from-violet-50 to-purple-50 border-violet-200"
                      }`}>
                        <div className="flex items-center justify-between">
                          <div>
                            <h4 className={`text-md font-semibold ${
                              hasCompletedGroup ? "text-green-800" : "text-violet-800"
                            }`}>
                              {baseName}
                            </h4>
                            <p className={`text-sm ${
                              hasCompletedGroup ? "text-green-600" : "text-violet-600"
                            }`}>
                              {hasCompletedGroup 
                                ? `ƒê√£ ho√†n th√†nh qua ${completedSubgroup?.tenNhom} - B·∫°n c√≥ th·ªÉ ch·ªçn th√™m m√¥n kh√°c ho·∫∑c ƒë·ªÉ nh∆∞ v·∫≠y`
                                : "Ch·ªçn m·ªôt trong c√°c nh√≥m sau (ch·ªâ c·∫ßn ho√†n th√†nh 1 nh√≥m)"
                              }
                            </p>
                            {/* Hi·ªÉn th·ªã s·ªë t√≠n ch·ªâ y√™u c·∫ßu cho t·ª´ng nh√≥m con */}
                            <div className="mt-2 flex flex-wrap gap-2">
                              {nhomList.map(nhom => {
                                const tinChiDaChon = getTinChiDaChonTrongNhom(nhom);
                                const isCompleted = tinChiDaChon >= nhom.tinChiYeuCau;
                                return (
                                  <span 
                                    key={nhom.id} 
                                    className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                                      isCompleted 
                                        ? "bg-green-100 text-green-800" 
                                        : "bg-gray-100 text-gray-700"
                                    }`}
                                  >
                                    {nhom.tenNhom}: {tinChiDaChon}/{nhom.tinChiYeuCau} TC
                                    {isCompleted && <span className="ml-1">‚úì</span>}
                                  </span>
                                );
                              })}
                            </div>
                          </div>
                          {hasCompletedGroup && (
                            <div className="flex items-center space-x-2">
                              <span className="inline-flex items-center px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium">
                                <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                </svg>
                                ƒê√£ ho√†n th√†nh
                              </span>
                            </div>
                          )}
                        </div>
                      </div>
                      
                      <NhomHocPhanTuChonTable
                        nhomHocPhanTuChon={nhomList}
                        selectedHocPhan={selectedHocPhan}
                        onAddHocPhan={addHocPhan}
                        getTinChiDaChonTrongNhom={getTinChiDaChonTrongNhom}
                        getChuyenNganhCompletionStatus={getChuyenNganhCompletionStatus}
                        isHocPhanAlreadyAdded={isHocPhanAlreadyAdded}
                      />
                    </div>
                  );
                })}
              </div>
            )}
          </div>
        )  : activeTab === "completionStatus" ? (
          <CompletionStatusSummary completionStatus={completionStatus} />
        ) : (
          <div className="space-y-6">
            {/* Selected h·ªçc ph·∫ßn table */}
            {selectedHocPhan.length > 0 ? (
              <>
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4 mb-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-semibold text-blue-800 mb-1">
                        K·∫ø ho·∫°ch h·ªçc t·∫≠p
                      </h3>
                      <p className="text-blue-600 text-sm">
                        B·∫°n ƒë√£ ch·ªçn {selectedHocPhan.length} h·ªçc ph·∫ßn
                        <span className="ml-2 text-blue-700">
                          - T·ªïng t√≠n ch·ªâ:{" "}
                          <span className="font-medium">
                            {selectedHocPhan.reduce((total, hp) => total + hp.tinChi, 0)}
                          </span>
                        </span>
                      </p>
                    </div>
                    <div className="flex items-center space-x-3">
                      <div className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                        {selectedHocPhan.length} m√¥n h·ªçc
                      </div>
                      <div className="bg-indigo-100 text-indigo-800 px-3 py-1 rounded-full text-sm font-medium">
                        {selectedHocPhan.reduce((total, hp) => total + hp.tinChi, 0)} t√≠n ch·ªâ
                      </div>
                    </div>
                  </div>
                </div>
                
                <KeHoachHocTapTable
                  name="H·ªçc ph·∫ßn ƒë√£ ch·ªçn"
                  data={selectedHocPhan}
                  columns={selectedColumns}
                  initialExpanded={true}
                  loading={false}
                />
                
                {/* Action buttons */}
                <div className="flex justify-end gap-2">
                  <button
                    onClick={() => setSelectedHocPhan([])}
                    className="px-6 py-2 bg-gray-400 hover:bg-gray-500 text-white rounded-xl transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-300"
                  >
                    H·ªßy t·∫•t c·∫£
                  </button>
                  <button
                    disabled={fetchLoading}
                    onClick={handleSaveKHHT}
                    className={`px-6 py-2 rounded-xl text-white transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-green-300 ${
                      fetchLoading
                        ? "cursor-not-allowed opacity-50 bg-gray-400"
                        : "bg-green-500 hover:bg-green-600"
                    }`}
                  >
                    {fetchLoading ? "ƒêang l∆∞u..." : "L∆∞u k·∫ø ho·∫°ch h·ªçc t·∫≠p"}
                  </button>
                </div>
              </>
            ) : (
              <div className="text-center py-12">
                <div className="bg-gray-100 rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-4">
                  <CirclePlus className="h-10 w-10 text-gray-400" />
                </div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  Ch∆∞a c√≥ h·ªçc ph·∫ßn n√†o ƒë∆∞·ª£c ch·ªçn
                </h3>
                <p className="text-gray-500 mb-4">
                  H√£y chuy·ªÉn sang tab "Ch·ªçn h·ªçc ph·∫ßn" ƒë·ªÉ th√™m c√°c m√¥n h·ªçc v√†o k·∫ø ho·∫°ch
                </p>
                <button
                  onClick={() => setActiveTab("select")}
                  className="inline-flex items-center px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors duration-200"
                >
                  <CirclePlus className="h-4 w-4 mr-2" />
                  Ch·ªçn h·ªçc ph·∫ßn
                </button>
              </div>
            )}
          </div>
        )}
        {/* Success/Error modals */}
        {success && (
          <ErrorMessageModal
            isOpen={!!success}
            onClose={() => setSuccess(null)}
            message={success}
          />
        )}
        <ErrorMessageModal
          isOpen={!!combinedError}
          onClose={clearCombinedError}
          message={combinedError || "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i."}
        />
      </>

    </div>
  );
};

export default NhapKeHoachHocTap;
